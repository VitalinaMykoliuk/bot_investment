from data.loader import *
from data.confige import *
from key_boards.admin_key_boards import *
from services.api_sqlite import *
from aiogram.dispatcher import FSMContext
from aiogram import types

users = Users()
config = Config()


def is_admin(msg):
    return str(msg.from_user.id) in str(admins)


@dp.message_handler(is_admin, commands='admin')
async def admin_menu(message: types.Message):
    await message.answer('¬©–ê–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=admin_action)


@dp.message_handler(is_admin, text='‚öôÔ∏è –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞')
async def balance_adjustment(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:",
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await storege.set_state(chat=message.from_user.id, state='user_balance')


@dp.message_handler(state='user_balance')
async def user_balance(message: types.Message, state: FSMContext):
    if message.text.capitalize() == "–ù–∞–∑–∞–¥":
        await message.answer('¬© –ê–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=admin_action)
        await state.finish()
        return
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        return
    db_user = users.get_user(int(message.text))
    if db_user:
        await message.answer(f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user["balance"]}')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')
        await state.update_data(data={'chat_id': int(message.text)})
        await state.set_state(state='change_balance')
    else:
        await message.answer('ID —é–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')


@dp.message_handler(state='change_balance')
async def user_ban(message: types.Message, state: FSMContext):
    if message.text.capitalize() == "–ù–∞–∑–∞–¥":
        await message.answer('¬© –ê–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=admin_action)
        await state.finish()
        return
    try:
        new_balance = abs(float(message.text))
        data =  await state.get_data()
        users.change_balance(data['chat_id'], new_balance)
        await message.answer('–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
        await message.answer('¬© –ê–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=admin_action)
        await state.finish()
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–∞–Ω–Ω—ã–µ!')
        return


@dp.message_handler(is_admin, text='‚ùå –ë–∞–Ω –Æ–∑–µ—Ä–∞')
async def ban_user_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:",
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await storege.set_state(chat=message.from_user.id, state='user_bun')


@dp.message_handler(state='user_bun')
async def user_ban(message: types.Message, state: FSMContext):
    if message.text.capitalize() == "–ù–∞–∑–∞–¥":
        await message.answer('¬© –ê–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=admin_action)
        await state.finish()
        return
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        return
    db_user = users.get_user(int(message.text))
    if db_user:
        await message.answer(f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user["is_banned"]}')
        await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —é–∑–µ—Ä–∞?',
                            reply_markup=types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add('–ó–∞–±–∞–Ω–∏—Ç—å',
                                                                                      '–†–∞–∑–±–∞–Ω–∏—Ç—å').add('–ù–∞–∑–∞–¥'))
        await state.update_data(data={'chat_id': int(message.text)})
        await state.set_state(state='bun_user_status')
    else:
        await message.answer('ID —é–∑–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')


@dp.message_handler(state='bun_user_status')
async def user_ban(message: types.Message, state: FSMContext):
    if message.text.capitalize() == "–ù–∞–∑–∞–¥":
        await message.answer('¬© –ê–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=admin_action)
        await state.finish()
        return
    else:
        data = await state.get_data()
        chat_id = data[list(data.keys())[0]]
        if message.text.capitalize() == '–ó–∞–±–∞–Ω–∏—Ç—å':
            users.change_is_banned(chat_id, 1)
        elif message.text.capitalize() == '–†–∞–∑–±–∞–Ω–∏—Ç—å':
            users.change_is_banned(chat_id, 0)
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
            return
        await message.answer('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
        await message.answer('¬© –ê–¥–º–∏–Ω –º–µ–Ω—é!', reply_markup=admin_action)
        await state.finish()


@dp.message_handler(text='üóí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def static(message: types.Message):
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤: {len([user for user in users])}')







