from key_boards.user_key_boards import *
from data.loader import *
from data.confige import *
from aiogram.dispatcher import FSMContext
from aiogram import types
from services.api_sqlite import *
import asyncio
from os import path
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

users = Users()
config = Config()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    if not users.get_user(message.from_user.id):
        ref = message.get_args()
        if ref:
            if users.get_user(ref):
                users.add_user(message.from_user.username, message.from_user.id, ref)
            else:
                users.add_user(message.from_user.username, message.from_user.id)
        else:
            users.add_user(message.from_user.username, message.from_user.id)

    member_1 = await bot.get_chat_member(mains_channels_id, message.from_user.id)
    member_2 = await bot.get_chat_member(mains_chat_id, message.from_user.id)
    status = ["member", "administrator", "creator"]
    if member_1.status not in status or member_2.status not in status:
        main_menu_1 = InlineKeyboardMarkup(row_width=1).add(
             InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ', url=mains_channels),
             InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ —á–∞—Ç', url=mains_chat),
             InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='check_subscribe'))
        await message.answer_photo(caption='‚ñ™–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é\n–ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ—Å—Ç–æ '
                                           '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ <a href="https://t.me/+FW2NiVVDnR82ZDUy">—á–∞—Ç</a>'
                                           ' –∏ <a href="https://t.me/investment_canal">–∫–∞–Ω–∞–ª</a> –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ\n'
                                           '–∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n'
                                           '¬©Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è 1 –∏ 2¬ª', parse_mode='html',
                                   photo=types.InputFile(path.join('img', 'authorization.jpeg')),
                                   reply_markup=main_menu_1)
    else:
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)


@dp.callback_query_handler(text='check_subscribe')
async def continue_menu(call: types.CallbackQuery):
    await bot.answer_callback_query(callback_query_id=call.id)
    member = await bot.get_chat_member(chat_id=mains_channels_id, user_id=call.from_user.id)
    if member.status in ["member", "administrator", "creator"]:
        member2 = await bot.get_chat_member(chat_id=mains_chat_id, user_id=call.from_user.id)
        if member2.status in ["member", "administrator", "creator"]:
            await call.message.answer('¬©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)
            return
    await call.message.answer('‚¨Ü –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª ‚¨Ü')  # –æ–∫–æ—à–∫–æ –¥–µ–ª–∞–µ—Ç show_alert=True


@dp.message_handler(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def process_contacts(message: types.Message):
    await message.answer('üìß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–∞–∑–¥–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n'
                                  '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @ZX8support\n'
                                  '–ù–∞—à —Å–∞–π—Ç: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@dp.message_handler(text="üóì –û–±—É—á–µ–Ω–∏—è")
async def study_investment(message: types.Message):
    contact = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚ûï –û—Ç–∫—Ä—ã—Ç—å –æ–±—É—á–µ–Ω–∏–µ', url='https://telegra.ph/Obuchenie-BNB-04-20'))
    await message.answer_photo(caption='üéì –ü–æ–ø–∞–ª –≤ –±–æ—Ç–∞, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å? –¢–æ–≥–¥–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è\n'
                                       '—Å –Ω–∞—à–∏–º –º–∏–Ω—É—Ç–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º:',
                               photo=types.InputFile(path.join('img', 'education (1).jpeg')),
                               reply_markup=contact)


@dp.message_handler(text="üóì –û–±—É—á–µ–Ω–∏—è", state="*")
async def process_state_learn(msg: types.Message, state: FSMContext):
    await study_investment(msg)
    await state.finish()


@dp.message_handler(text='‚å® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
async def calc_investment(message: types.Message):
    await message.answer(text='‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await storege.set_state(chat=message.chat.id, state='calculate')


@dp.message_handler(state='calculate')
async def calculate_investment(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)
        await state.finish()
        return
    try:
        amount = float(message.text)
        if amount <= 100:
            raise ValueError
        percent = config.get_percent()

        daily_return = amount * percent / 100
        monthly_return = daily_return * 30.4167
        yearly_return = daily_return * 365
        await message.answer_photo(caption='üí± –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã —Å—É–º–µ–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –í–∞—à—É –ø—Ä–∏–±—ã–ª—å, –æ—Ç —Å—É–º–º—ã –≤–∞—à–µ–π '
                                           '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç:\n\n'
                                           f'üíµ –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: {amount}\n'
                                           f'–ü—Ä–∏–±—ã–ª—å –≤ —Å—É—Ç–∫–∏: {daily_return}\n'
                                           f'–ü—Ä–∏–±—ã–ª—å –≤ –º–µ—Å—è—Ü: {monthly_return}\n'
                                           f'–ü—Ä–∏–±—ã–ª—å –≤ –≥–æ–¥: {yearly_return}', photo=types.InputFile(path.join('img',
                                                                    'calculator.jpeg')),
                                   reply_markup=types.InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(
                                       '‚ûï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', callback_data='calculate_again'
                                   )))

        await state.finish()
    except ValueError:
        await message.answer('üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 100.0‚ÇΩ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!')
        return


@dp.callback_query_handler(text='calculate_again')
async def calculate_again_1(call: types.CallbackQuery):
    await call.message.answer(text='‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await storege.set_state(chat=call.message.chat.id, state='calculate')


@dp.message_handler(text="‚å® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", state="*")
async def process_state_calc(msg: types.Message, state: FSMContext):
    await calc_investment(msg)
    await state.finish()


@dp.message_handler(text='üëî –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º')
async def user_partners(message: types.Message):
    me = await bot.get_me()
    await message.answer_photo(caption='‚ñ™ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É'
                                       '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ª—é–¥–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n\n'
                                       f'üí∏ –ü—Ä–æ—Ü–µ–Ω—Ç —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {investmen}%\n'
                                       f'üí≥ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {users.get_user(message.from_user.id)["investments"]}\n\n'
                                       f'üë• –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {users.get_count_ref(message.from_user.id)} \n\n'
                                       f'üîó –í–∞—à–∞ —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞:\nhttps://t.me/{me.username}'
                                       f'?start={message.from_user.id}\n\n'
                                       f'„ÄΩ –í–Ω–µ—à–Ω—è—è —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞:\nhttps://teleg.run/{me.username}'
                                       f'?start={message.from_user.id}\n\n', photo=types.InputFile(path.join('img',
                                                  'partners.jpeg')),
                                       reply_markup=types.InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(
                                       "‚ûï –ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", url='https://telegra.ph/Partnyoram-BNB-04-20'
                                       )))


@dp.message_handler(text="üëî –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º", state="*")
async def process_state_partners(msg: types.Message, state: FSMContext):
    await user_partners(msg)
    await state.finish()


@dp.message_handler(text='üí≥ –ö–æ—à–µ–ª–µ–∫')
async def process_state_wallet(message: types.Message):
    user = users.get_user(message.from_user.id)
    partners = len([user for user in users if str(user['is_ref']) == str(message.from_user.id)])
    await message.answer_photo(caption= f'ü§ñ –í–∞—à ID: {message.from_user.id}\n'
                               f'üìÜ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {user["date_created"]}\n\n'
                               f'üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user["balance"]}‚ÇΩ\n'
                               f'üë• –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {partners}—á–µ–ª.\n\n',
                               photo=types.InputFile(path.join('img', 'wallet.jpeg')),
                               reply_markup=types.InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(
                                   "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up"),
                                   InlineKeyboardButton("‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")))


@dp.message_handler(text='üí≥ –ö–æ—à–µ–ª–µ–∫', state="*")
async def process_wallet(msg: types.Message, state: FSMContext):
    await process_state_wallet(msg)
    await state.finish()


'''#########investment########'''


@dp.message_handler(text='üñ• –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
async def investment(message: types. Message):
    user = users.get_user(message.from_user.id)
    await message.answer_photo(caption='–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –Ω–∏–∂–µ, –∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –Ω–µ–≥–æ –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ '
                                       '–µ–µ –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ:\n\n'
                               f'üì† –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤–∫–ª–∞–¥–∞: {investmen}%\n'
                               f'‚è± –í—Ä–µ–º—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: 24 —á–∞—Å–∞\n'
                               f'üìÜ –°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞: –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ\n\n'
                               f'üí≥ –í–∞—à –≤–∫–ª–∞–¥: {round(user["investments"], 2)}‚ÇΩ\n'
                               f'üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ: {round(user["balance"], 2)}‚ÇΩ\n\n',
                               photo=types.InputFile(path.join('img', 'invest.jpeg')),
                               reply_markup=types.InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(
                                   "‚ûï –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="invest"),
                                   InlineKeyboardButton("‚ûñ –°–æ–±—Ä–∞—Ç—å", callback_data="collect")))


@dp.callback_query_handler(text="invest")
async def invest(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:', reply_markup=types.ReplyKeyboardMarkup(
        resize_keyboard=True).add('–Ω–∞–∑–∞–¥'))
    await storege.set_state(chat=call.from_user.id, state='invest_amount')


@dp.message_handler(state='invest_amount')
async def invest_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)
        await state.finish()
        return
    try:
        amount = float(message.text)
        user = users.get_user(user_id)
        if float(user['balance']) < amount:
            raise ValueError
        users.change_investments(user_id, user['investments'] + amount)
        users.change_balance(user_id, user['balance'] - amount)
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å—É–º–º—É {amount}')
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)
        await state.finish()
    except ValueError:
        await message.answer("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ"
                             "–∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥")


@dp.callback_query_handler(text='collect')
async def collect(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞  —Å—Ä–µ–¥—Å—Ç–≤:', reply_markup=types.ReplyKeyboardMarkup(
        resize_keyboard=True).add('–Ω–∞–∑–∞–¥'))
    await storege.set_state(chat=call.from_user.id, state='collect_amount')


@dp.message_handler(state='collect_amount')
async def collect_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)
        await state.finish()
        return
    try:
        amount = float(message.text)
        user = users.get_user(user_id)
        if float(user['investments']) < amount:
            raise ValueError
        users.change_investments(user_id, user['investments'] - amount)
        users.change_balance(user_id, user['balance'] + amount)
        await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ —Å—É–º–º—É {amount}')
        await message.answer('¬© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=user_menu)
        await state.finish()
    except ValueError:
        await message.answer("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ"
                             "–∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥")


@dp.message_handler(text='üñ• –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', state="*")
async def investments(msg: types.Message, state: FSMContext):
    await investmen(msg)
    await state.finish()








    # await message.answer(
    #     f"&#9899; –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "
    #     f"–∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. <br><br> &#169; –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è 1 –∏ 2¬ª", parse_mode='html')
    #
    # await asyncio.sleep(3)
    # await message.answer('‚§µ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª ‚§µ', reply_markup=user_key_board.main_menu_1)









# @dp.callback_query_handler(lambda x: x.data == '–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª')
# async def subscribe_to_channel(callback_query: CallbackQuery):
#     await callback_query.answer(text='–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª')
#
# @dp.callback_query_handler(lambda x: x.data == '–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ —á–∞—Ç')
# async def subscribe_to_chat(callback_query: CallbackQuery):
#     await callback_query.answer(text='–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —á–∞—Ç')
#
# @dp.callback_query_handler(lambda x: x.data == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
# async def continue_handler(callback_query: CallbackQuery):
#     await callback_query.answer(text='–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏')
#
#
#
#
# @dp.message_handler(text="üñ• –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
# async def investments(message: types.Message):
#     await message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', reply_markup=user_key_board.main)
#
#
# @dp.message_handler(text="üí≥ –ö–æ—à–µ–ª—ë–∫"))
# async def balance(message: types.Message):
#     await message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ—à–µ–ª—ë–∫', reply_markup=user_key_board.main)
#
#
# @dp.message_handler(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
# async def contacts(message: Message):
#     await message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã', reply_markup=user_key_board.main)
#
# @dp.message_handler(text="üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Ç–Ω—å–æ—Ä–∞–º"))
# async def balfdsnce(message: types.Message):
#     await message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–∞—Ä—Ç–Ω–µ—Ä–∞–º', reply_markup=user_key_board.main)
#
#
# @dp.message_handler(text="üñ® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
# async def profiler(message: types.Message, state: FSMContext):
#     await message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', reply_markup=user_key_board.main)
#
#
# @dp.message_handler(text="üóí –û–±—É—á–µ–Ω–∏–µ"))
# async def profile(message: types.Message):
#     await message.answer(text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–±—É—á–µ–Ω–∏–µ', reply_markup=user_key_board.main)
#
#
